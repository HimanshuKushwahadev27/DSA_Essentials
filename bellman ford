class Solution {
    public int[] bellmanFord(int V, int[][] edges, int src) {
        // code here
        
        int[]ans=new int[V];
        for(int i=0;i<V;i++){
            ans[i]=(int)(1e8);
        }
        ans[src]=0;
        
        for(int i=0;i<V;i++){
            for(int[]ne:edges){
                int u=ne[0];
                int v=ne[1];
                int wt=ne[2];
                //relaxation 
                if(ans[u]!=1e8&&ans[u]+wt<ans[v]){
                    ans[v]=ans[u]+wt;
                }
            }
        }//checking for the negative cycles
        //even after n-1 rotations if we still get reduction we return -1;
        for(int[]edge:edges){
            int u=edge[0];
            int v=edge[1];
            int wt=edge[2];
            
            if(ans[u]!=1e8&&ans[u]+wt<ans[v]){
                int temp[]=new int[1];
                temp[0]=-1;
                return temp;
            }
        }
        return ans;
        
    }
}
