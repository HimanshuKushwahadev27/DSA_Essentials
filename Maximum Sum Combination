class Solution {
    public ArrayList<Integer> topKSumPairs(int[] a, int[] b, int k) {
        // code here
        Arrays.sort(a);
        Arrays.sort(b);
        
        ArrayList<Integer> res=new ArrayList<>();
        PriorityQueue<int[]> pq=new PriorityQueue<>((c,d) -> d[0]-c[0]);
        HashSet<List<Integer>> st=new HashSet<>();
        
        int i=a.length-1;
        int j=b.length-1;
        
        pq.offer(new int[]{a[i]+b[i],i,j});
    
        st.add(Arrays.asList(i,j));
        
        while(k-->0  && !pq.isEmpty()){
            int [] num=pq.poll();
            res.add(num[0]);
            
            if(num[1]-1>=0 && !st.contains(Arrays.asList(num[1]-1,num[2]))){
                pq.offer(new int[]{a[num[1]-1] + b[num[2]] ,num[1]-1,num[2]});
                st.add(Arrays.asList(num[1]-1,num[2]));
            }
            if(num[2]-1 >=0 && !st.contains(Arrays.asList(num[1],num[2]-1))){
                pq.offer(new int[]{a[num[1]]+b[num[2]-1] , num[1] ,num[2]-1});
                st.add(Arrays.asList(num[1],num[2]-1));
            }
        }
        return res;
    }
}
