class Solution {
    
    boolean getSubarray(int mid , int []arr , int n){
        
       int sub=1;
       int sum=0;
       
       for(int i : arr){
           if(sum+i>mid){
               sub++;
               sum=i;
           }else{
               sum+=i;
           }
       }
       return sub<=n;
    }
    public int splitArray(int[] arr, int k) {
        // code here
        
        int low=Arrays.stream(arr).max().getAsInt();
        
        int high=0;
        for(int i : arr){
            high+=i;
        }
        int ans=0;
        while(low <= high){
            
            int mid = (low+high)/2;
            

            if(getSubarray(mid , arr , k)){
                 ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return ans;
        
    }
};class Solution {
    
    boolean getSubarray(int mid , int []arr , int n){
        
       int sub=1;
       int sum=0;
       
       for(int i : arr){
           if(sum+i>mid){
               sub++;
               sum=i;
           }else{
               sum+=i;
           }
       }
       return sub<=n;
    }
    public int splitArray(int[] arr, int k) {
        // code here
        
        int low=Arrays.stream(arr).max().getAsInt();
        
        int high=0;
        for(int i : arr){
            high+=i;
        }
        int ans=0;
        while(low <= high){
            
            int mid = (low+high)/2;
            

            if(getSubarray(mid , arr , k)){
                 ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return ans;
        
    }
};
