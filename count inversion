class Solution {
    // Function to count inversions in the array.
    public static  int num=0;
    
    static  void merge(int arr[],int low,int m,int high ){
        
        int n1 = m-low+1;
        int n2 = high-m;
        int []a1 =  new int [n1];
        int []a2 = new int [n2];
        
        for(int i=0;i<n1;i++){
            a1[i]=arr[low+i];
        }
        for(int i=0;i<n2;i++){
            a2[i]=arr[m+i+1];
        }
        int i=0;
        int j=0;
        int k=low;
        
        while(i<n1&&j<n2){
            if(a1[i]<=a2[j]){
                arr[k++]=a1[i++];
            }else{
                arr[k++]=a2[j++];
                //calcuating count inversions 
                num=num+(n1-i);
            }
        }
        
        while(i<n1){
            arr[k++]=a1[i++];
        }
        while(j<n2){
            arr[k++]=a2[j++];
        }
    }
    
    static  void mergeSort(int arr[],int l,int r){
        if(l<r){
            int m=l+(r-l)/2;
            mergeSort(arr,l,m);
            mergeSort(arr,m+1,r);
            merge(arr,l,m,r);
        }
    }
    static int inversionCount(int arr[]) {
        // Your Code Here
        Solution m=new Solution();
        
        mergeSort(arr,0,arr.length-1);
        return num;
    }
}
