class Node{
    int row;
    int col;
    int num;
    Node(int row, int col , int num){
        this.row=row;
        this.col=col;
        this.num=num;
    }
}
class Solution {
    // Function to find distance of nearest 1 in the grid for each cell.
   int [][] help={{-1,0} , {0,1} , {1,0} , {0,-1}};
    public int[][] nearest(int[][] grid) {
        // Code here
        int [][] ans=new int[grid.length][grid[0].length];
        boolean[][]vis=new boolean[grid.length][grid[0].length];
        
        Queue<Node> q=new LinkedList<>();
        
        for(int i=0 ; i<grid.length ; i++){
            
            for(int j=0 ; j<grid[i].length ; j++){
                
                if(grid[i][j]==1){
                    vis[i][j]=true;
                    q.add(new Node(i,j,0));
                }
            }
        }
       while(!q.isEmpty()){
           Node curr=q.poll();
           int c=curr.col;
           int r=curr.row;
           int v=curr.num;
           
           ans[r][c]=v;
           
           for(int i=0 ; i<help.length ; i++){
               int nr=r+help[i][0];
               int nc=c+help[i][1];
               
               if(nr>=0 && nr<grid.length && nc>=0 && nc<grid[0].length && !vis[nr][nc]){
                   vis[nr][nc]=true;
                   q.offer(new Node(nr,nc,v+1));
               }
           }
       }
                  return ans;

    }
}
