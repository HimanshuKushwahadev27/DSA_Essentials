class Node implements Comparable<Node>{
    char val;
    int freq;
    
    Node(char val, int freq){
        this.val=val;
        this.freq=freq;
    }
    
    public int compareTo(Node o){
        return Integer.compare(o.freq,this.freq);
    }
    
}
class Solution {
    
    public static String rearrangeString(String s) {
        // code here
        HashMap<Character,Integer> hm=new HashMap<>();
        
        for(char c:s.toCharArray()){
            hm.put(c,hm.getOrDefault(c,0)+1);
        }
        
        PriorityQueue<Node> pq=new PriorityQueue<>();
        //some checks 
        for(int f:hm.values()){
            if(f>(s.length()+1)/2){
                return "";
            }
        }
        for(Map.Entry<Character,Integer> e:hm.entrySet()){
            pq.add(new Node(e.getKey(),e.getValue()));
        }
        
        StringBuilder res=new StringBuilder();
        Node prev=new Node('#',-1);
        
        while(!pq.isEmpty()){
            Node temp=pq.poll();
            res.append(temp.val);
            temp.freq--;
            
            if(prev.freq>0){
                pq.add(prev);
            }
            prev=temp;
        }
        
        for(int i=1;i<res.length();i++){
            if(res.charAt(i)==res.charAt(i-1)){
                return "";
            }
        }
        return res.toString();
        
    }
}
