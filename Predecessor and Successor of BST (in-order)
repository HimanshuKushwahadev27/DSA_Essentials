class Solution {
    public void helper(Node root,int key,Node[]pre,Node[]suc){
        if(root==null){
            return ;
        }
        if(root.data==key){
            //succesot maybe in the leftmostnodee of the right sub tree;
            if(root.right!=null){
                Node temp= root.right;
                while(temp.left!=null)temp=temp.left;
                suc[0]=temp;
            }
            //predecessor may be in the rightmost node of the left subtree;
            
            if(root.left!=null){
                Node temp=root.left;
                while(temp.right!=null)temp=temp.right;
                pre[0]=temp;
            }
            
        }
        //greater than key mean successor can be the root itself;
        else if(root.data>key){
            suc[0]=root;
            helper(root.left,key,pre,suc);
        }else{
            //predecessor
            pre[0]=root;
            helper(root.right,key,pre,suc);
        }
    }
    public ArrayList<Node> findPreSuc(Node root, int key) {
        // code here
        ArrayList<Node> res=new ArrayList<>();
        
        Node [] pre=new Node[1];
        Node [] suc=new Node[1];
        
        helper(root,key,pre,suc);
        
        res.add(pre[0] !=null? pre[0]:new Node(-1));
        res.add(suc[0]!=null ? suc[0 ]: new Node(-1));
        return res;
        
    }
}
