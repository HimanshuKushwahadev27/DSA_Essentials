class Solution {
    public static void DFS(ArrayList<ArrayList<Integer>> adj ,boolean [] vis ,Stack<Integer> st ,int s){
        vis[s]=true;
        
        for(int v : adj.get(s)){
            if(!vis[v]){
                DFS(adj,vis,st,v);
            }
        }
        st.add(s);
    }
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        // code here
        Stack<Integer> st=new Stack<>();
        ArrayList<Integer> al=new ArrayList<>();
        
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
        for(int i=0;  i<V ;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0; i<edges.length ; i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj.get(u).add(v);
        }
        
        boolean [] vis=new boolean[V];
        
        for(int i=0 ; i<V ; i++){
            if(!vis[i]){
                DFS(adj,vis,st,i);
            }
        }
        
        while(!st.isEmpty()){
            int s=st.pop();
            al.add(s);
        }
        return al;
    }
}
