class Solution {
    public boolean DFS(ArrayList<ArrayList<Integer>> adj, boolean [] vis,int s, int parent){
        vis[s]=true;
        for(int v : adj.get(s)){
            if(!vis[v]){
                if(DFS(adj,vis,v,s)){
                    return true;
                }
            }else{
                if(v!=parent){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        boolean[] vis=new boolean[V];
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
        for(int i=0; i <V ; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i=0; i <edges.length ; i++){
            int k=edges[i][0];
            int j=edges[i][1];
            adj.get(k).add(j);
            adj.get(j).add(k);
        }
        for(int i=0; i <V ; i++){
             if(!vis[i]){
            if(DFS(adj,vis,i,-1)){
                return true;
            }
             }
        }return false;
    }
}
