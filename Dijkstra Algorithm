class Pair{
    int node ;
    int weight;
    Pair(int node , int weight){
        this.node=node;
        this.weight=weight;
    }
}
class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        // code here
        boolean [] vis=new boolean[V];
        int ans[] = new int[V];
        Arrays.fill(ans,Integer.MAX_VALUE);
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        
        for(int i=0; i <V ; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i=0 ; i<edges.length ; i++){
            int v=edges[i][0];
            int u=edges[i][1];
            int wt=edges[i][2];
            
            adj.get(u).add(new Pair(v,wt));
            adj.get(v).add(new Pair(u,wt));
        }
        PriorityQueue<Pair> pq=new PriorityQueue<>((a,b) -> a.weight-b.weight);
        
        ans[src]=0;
        
        pq.add(new Pair(src,0));
        
        while(!pq.isEmpty()){
            Pair curr=pq.poll();
            if(vis[curr.node])continue;
            vis[curr.node]=true;
            
            for(Pair k : adj.get(curr.node)){
                if(!vis[k.node]){
                    if(ans[curr.node]+k.weight<ans[k.node]){
                        ans[k.node]=ans[curr.node]+k.weight;
                        pq.add(new Pair(k.node,ans[k.node]));
                    }
                }
            }
        }
        return ans;
    }
}
