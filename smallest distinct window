class Solution {
    public int findSubString(String str) {
        // code here
        if(str.length()==0){
            return 0;
        }
        Set<Character>uniq=new HashSet<>();
        for(int i=0;i<str.length();i++){
            uniq.add(str.charAt(i));
        }
       
        int req=uniq.size();
        int formed=0;
        int left=0;
        int min=Integer.MAX_VALUE;
         HashMap<Character,Integer> hm=new HashMap<>();
        
        for(int i=0;i<str.length();i++){
            hm.put(str.charAt(i),hm.getOrDefault(str.charAt(i),0)+1);
            
            if(hm.get(str.charAt(i))==1){
                formed++;
            }
            //runs as long as current window contains all req elements (left .... i)
            while(formed==req){
                //if the current contains all the unique character the check if it is minimum
                //than the previous 
                if(i-left+1<min){
                    min=i-left+1;
                }
                //shrinking the window from the left 
                //while removing the count af the element at  the left from the current window
                //and also reducing fromed if we get the count of the value at the left 0
                //after removing it 
                char cleft=str.charAt(left);
                hm.put(cleft,hm.get(cleft)-1);
                if(hm.get(cleft)==0){
                    formed--;
                }
                left++;
            }
        }
        return min;
    }
}
