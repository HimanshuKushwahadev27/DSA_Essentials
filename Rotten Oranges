class Node{
    int row;
    int col;
    Node(int row, int col){
        this.row=row;
        this.col=col;
    }
}
class Solution {
    public int orangesRotting(int[][] mat) {
        // Code here
        Queue<Node> q=new LinkedList<>();
        
        for(int i=0 ; i<mat.length ; i++){
            
            for(int j=0 ; j<mat[i].length ; j++){
                
                if(mat[i][j]==2)q.add(new Node(i,j));
            }
        }
        
        q.add(null);
        int temp=0;
        
        while(!q.isEmpty()){
            Node curr=q.poll();
            if(curr==null){
                if(q.isEmpty())break;
                temp++;
                q.add(null);
            }
            else{
            int r=curr.row;
            int c=curr.col;
            
            if(r-1>=0 && mat[r-1][c]==1){
                mat[r-1][c]=2;
                q.add(new Node(r-1,c));
            }
            
            if(r+1<mat.length && mat[r+1][c]==1){
                mat[r+1][c]=2;
                q.add(new Node(r+1,c));
            }
            
            if(c-1>=0 && mat[r][c-1]==1){
                mat[r][c-1]=2;
                q.add(new Node(r,c-1));
            }
            
            if(c+1<mat[r].length && mat[r][c+1]==1){
                mat[r][c+1]=2;
                q.add(new Node(r,c+1));
            }
            }
        }
        
        for(int i=0 ; i <mat.length ; i++){
            
            for(int j=0 ; j<mat[i].length ; j++){
                if(mat[i][j]==1)return -1;
            }
        }
        return temp;
    }
}
