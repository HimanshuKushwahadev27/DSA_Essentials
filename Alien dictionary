
//Solution by Himanshu Kushwaha;

class Solution {
    
    public String findOrder(String[] words) {
        // code here
        Map<Character,Set<Character>> graph=new HashMap<>();
        Map<Character,Integer> inDegree=new HashMap<>();
        
        for(String word:words){
            for(char c:word.toCharArray()){
                graph.putIfAbsent(c,new HashSet<>());
                inDegree.putIfAbsent(c,0);
            }
        }
        
        for(int i=0;i<words.length-1;i++){
            String w1=words[i];
            String w2=words[i+1];
            
            if(w1.length()>w2.length()&&w1.startsWith(w2)){
                return "";
            }
            int minlen=Math.min(w1.length(),w2.length());
            for(int j=0;j<minlen;j++){
                char c1=w1.charAt(j);
                char c2=w2.charAt(j);
                
                if(c1!=c2){
                    if(!graph.get(c1).contains(c2)){
                        graph.get(c1).add(c2);
                        inDegree.put(c2,inDegree.get(c2)+1);
                    }
                    break;
                }
            }
        }
        Queue<Character> q=new LinkedList<>();
        for(char c:inDegree.keySet()){
            if(inDegree.get(c)==0){
                q.offer(c);
            }
        }StringBuilder order=new StringBuilder();
        while(!q.isEmpty()){
            char curr=q.poll();
            order.append(curr);
            for(char ne:graph.get(curr)){
                inDegree.put(ne,inDegree.get(ne)-1);
                if(inDegree.get(ne)==0){
                    q.offer(ne);
                }
            }
        }
        if(order.length()<inDegree.size()){
            return "";
        }
        return order.toString();
        
    }
}
