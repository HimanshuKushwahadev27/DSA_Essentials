/*Complete the function given below*/
class Solution {
    // Returns area of the largest rectangle with all 1s in mat[][]
    public static int helper(int arr[]){
        int n=arr.length;
        
        int []left=new int[n];
        int []right=new int[n];
        
        Stack<Integer> st=new Stack<>();
        Stack<Integer> st1=new Stack<>();
        
        //PSE
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }if(st.isEmpty()){
                left[i]=0;
            }else{
                left[i]=st.peek()+1;
            }st.push(i);
        }
        
        //NSE
        for(int i=n-1;i>=0;i--){
            while(!st1.isEmpty() && arr[st1.peek()]>=arr[i]){
                st1.pop();
            }if(st1.isEmpty()){
                right[i]=n-1;
            }else{
                right[i]=st1.peek()-1;
            }st1.push(i);
        }
        int cnt=Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++){
            cnt=Math.max(cnt , (right[i]-left[i]+1)*arr[i]);
        }
        return cnt;
    }
    static int maxArea(int mat[][]) {
        // Your code here
        int []arr=new int[mat[0].length];
        
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]==0){
                    arr[j]=0;
                }
                arr[j]+=mat[i][j];
            }
            ans=Math.max(ans,helper(arr));
        }
        return ans;
    }
}
