
class Solution {
    // Function to find the minimum number of swaps required to sort the array.
    public int minSwaps(int arr[]) {
        // Code here
        //contains original index and elements
      int [][]list=new int[arr.length][2];
      
      for(int i=0;i<arr.length;i++){
          list[i][0]=arr[i];
          list[i][1]=i;
      }
      
      Arrays.sort(list,(a,b)->Integer.compare(a[0],b[0]));
      
      boolean []vis=new boolean[arr.length];
      int ans=0;
      for(int i=0;i<list.length;i++){
          //if it is already at its place do nothing or it is visited
          if(list[i][1]==i || vis[i]){
              continue;
          }
          //using cycle sort concept
          int j=i;
          int cnt=0;
          //while we are getting false
          while(!vis[j]){
              vis[j]=true;
              //jumping to its original position as this index will contain the element's 
              //original position , but now it contains element that was at i
              j=list[j][1];
              //since we jump that means we swap
              cnt++;
          }
          //if we swapped update ans
          if(cnt>1){
              ans+=cnt-1;
          }
      }
      return ans;
    }
}
