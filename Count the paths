class Solution {
    int DFS(int src ,int dest , List<List<Integer>> graph , int[]memo){
        
        if(src==dest)return 1;
        if(memo[src]!=-1)return memo[src];
        
        int total=0;
        
        for(int ne : graph.get(src)){
            total+=DFS(ne , dest , graph , memo);
        }
        memo[src]=total;
        return total;
    }
    public int countPaths(int[][] edges, int V, int src, int dest) {
        // Code here
      List<List<Integer>> graph=new ArrayList<>();
      
      //adjacency list
      for(int i=0 ; i< V ; i++){
          graph.add(new ArrayList<>());
      }
      
     for(int [] edge : edges){
         graph.get(edge[0]).add(edge[1]);
     }
        
        int [] memo =new int[V];
        Arrays.fill(memo,-1);
        
        return DFS(src,dest,graph,memo);
        
        
    }
}
