class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int [][]dp=new int [val.length+1][W+1];
        
        for(int i=1 ; i<=val.length ; i++){
            
            for(int j=1 ; j<=W ; j++){
                
                if( wt[i-1] > j ){
                     
                    dp[i][j]=dp[i-1][j];
                }else{
                    dp[i][j]=Math.max(dp[i-1][j] , val[i-1]+dp[i-1][j-wt[i-1]] );
                }
            }
        }return dp[val.length][W];
    }
}


class Solution {
    public static int dp[][];
    static int rec(int w , int val[] , int wt[] , int n){
        
        if(n==0 || w==0)return 0;
        if(dp[n][w]!=-1)return dp[n][w];
        
        if(wt[n-1] > w){
            dp[n][w]=rec(w , val , wt ,n-1);
        }else{
            dp[n][w] = Math.max(rec(w ,val ,wt , n-1)
                                 , val[n-1]+rec( w-wt[n-1] , val , wt ,n-1));
        }
        return dp[n][w];
    }
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        dp=new int [val.length+1][W+1];
        int n=val.length;
        for(int [] i : dp){
            Arrays.fill(i,-1);
        }
        
        return rec(W , val , wt , n );
    }
}
