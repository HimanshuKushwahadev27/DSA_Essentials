class Solution {
   
    public static int[] minimumTime(int n, int m, int[][] edges) {
        // code here
        boolean [] vis=new boolean[n];
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
        for(int i=0 ; i<n ;i++){
            adj.add(new ArrayList<>());
        }
        
        int [] index=new int[n];
        
        for(int i=0; i<edges.length ; i++){
            int u=edges[i][0]-1;
            int v=edges[i][1]-1;
            adj.get(u).add(v);
            index[v]++;
        }
        Queue<Integer> q=new LinkedList<>();
        
        int [] ans=new int[n];
        int cnt=0;
        for(int i=0 ; i<n; i++){
           if(index[i]==0){
               q.add(i);
               ans[i]=1;
           }
        }
        
        while(!q.isEmpty()){
            int curr=q.poll();
            
            for(int ne : adj.get(curr)){
                index[ne]--;
                
                if(index[ne]==0){
                    q.add(ne);
                    ans[ne]=1+ans[curr];
                }
            }
        }
        return ans;
    }
}
